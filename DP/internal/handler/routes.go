// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	AdminLogin "DP/DP/internal/handler/AdminLogin"
	AdminPosition "DP/DP/internal/handler/AdminPosition"
	AdminProductType "DP/DP/internal/handler/AdminProductType"
	AdminShop "DP/DP/internal/handler/AdminShop"
	AdminShopStaff "DP/DP/internal/handler/AdminShopStaff"
	AdminUpDate "DP/DP/internal/handler/AdminUpDate"
	AdminUser "DP/DP/internal/handler/AdminUser"
	BmsAnnouncement "DP/DP/internal/handler/BmsAnnouncement"
	BmsInfo "DP/DP/internal/handler/BmsInfo"
	BmsOrder "DP/DP/internal/handler/BmsOrder"
	BmsOver "DP/DP/internal/handler/BmsOver"
	BmsSalesData "DP/DP/internal/handler/BmsSalesData"
	Employee "DP/DP/internal/handler/Employee"
	LowProduct "DP/DP/internal/handler/LowProduct"
	Manage "DP/DP/internal/handler/Manage"
	OrderServices "DP/DP/internal/handler/OrderServices"
	Product "DP/DP/internal/handler/Product"
	ProductType "DP/DP/internal/handler/ProductType"
	Staff "DP/DP/internal/handler/Staff"
	StoreServices "DP/DP/internal/handler/StoreServices"
	User "DP/DP/internal/handler/User"
	"DP/DP/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/Login",
				Handler: User.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/Register",
				Handler: User.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/User"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetShop",
				Handler: StoreServices.GetShopHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetProductList",
				Handler: StoreServices.GetProductListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetLowProductList",
				Handler: StoreServices.GetLowProductListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetDetailedProduct",
				Handler: StoreServices.GetDetailedProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetAnnouncementList",
				Handler: StoreServices.GetAnnouncementListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/StoreServices"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/GetTotalPrice",
				Handler: OrderServices.GetTotalPriceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/PostOrder",
				Handler: OrderServices.PostOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/GetOrderList",
				Handler: OrderServices.GetOrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/GetDetailedOrder",
				Handler: OrderServices.GetDetailedOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/OverOrder",
				Handler: OrderServices.OverOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/CancellationOverOrder",
				Handler: OrderServices.CancellationOverOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ConfirmOrder",
				Handler: OrderServices.ConfirmOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetUserInfo",
				Handler: OrderServices.GetUserInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/Order"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/Login",
				Handler: Staff.StaffLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/Staff"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/Login",
				Handler: Manage.ManageLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/Manage"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/PersonalInfo",
				Handler: BmsInfo.PersonalInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/BmsInfo"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetUnreceivedOrder",
				Handler: BmsOrder.GetUnreceivedOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ReceivingOrder",
				Handler: BmsOrder.ReceivingOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UnReceivingOrder",
				Handler: BmsOrder.UnReceivingOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetReceivedOrder",
				Handler: BmsOrder.GetReceivedOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetCompleteOrder",
				Handler: BmsOrder.GetCompleteOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetOrderDetails",
				Handler: BmsOrder.GetOrderDetailsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/BmsOrder"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetPositionList",
				Handler: Employee.GetPositionListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetEmployeeList",
				Handler: Employee.GetEmployeeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/SetEmployee",
				Handler: Employee.SetEmployeeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteEmployee",
				Handler: Employee.DeleteEmployeeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UpDateEmployee",
				Handler: Employee.UpDateEmployeeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/Employee"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/GetProductTypeList",
				Handler: ProductType.GetProductTypeListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/ProductType"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetProductList",
				Handler: Product.GetProductListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetProductDetails",
				Handler: Product.GetProductDetailsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ReleaseProduct",
				Handler: Product.ReleaseProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UpDateProduct",
				Handler: Product.UpDateProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteProduct",
				Handler: Product.DeleteProductHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/Product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetLowProduct",
				Handler: LowProduct.GetLowProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetLowProductDetails",
				Handler: LowProduct.GetLowProductDetailsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ReleaseLowProduct",
				Handler: LowProduct.ReleaseLowProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UpDateLowProduct",
				Handler: LowProduct.UpDateLowProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteLowProduct",
				Handler: LowProduct.DeleteLowProductHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/LowProduct"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetOverOrder",
				Handler: BmsOver.GetOverOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/OverOrderHandle",
				Handler: BmsOver.OverOrderHandleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/BmsOver"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetSalesData",
				Handler: BmsSalesData.GetSalesDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetOrderData",
				Handler: BmsSalesData.GetOrderDataHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/BmsSalesData"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/PostAnnouncement",
				Handler: BmsAnnouncement.PostAnnouncementHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetAnnouncementList",
				Handler: BmsAnnouncement.GetAnnouncementListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UpdateAnnouncement",
				Handler: BmsAnnouncement.UpdateAnnouncementHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteAnnouncement",
				Handler: BmsAnnouncement.DeleteAnnouncementHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/BmsAnnouncement"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/Login",
				Handler: AdminLogin.AdminLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/AdminLogin"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/UpDatePassWord",
				Handler: AdminUpDate.UpDatePassWordHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/AdminUpDate"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetShopList",
				Handler: AdminShop.GetShopListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/PostShop",
				Handler: AdminShop.PostShopHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/PostAdmin",
				Handler: AdminShop.PostAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetAdmin",
				Handler: AdminShop.GetAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteAdmin",
				Handler: AdminShop.DeleteAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/PostShopAdmin",
				Handler: AdminShop.PostShopAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteShopAdmin",
				Handler: AdminShop.DeleteShopAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetShopAdmin",
				Handler: AdminShop.GetShopAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UpDateShop",
				Handler: AdminShop.UpDateShopHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteShop",
				Handler: AdminShop.DeleteShopHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/AdminShop"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetProductTypeList",
				Handler: AdminProductType.GetProductTypeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/PostProductType",
				Handler: AdminProductType.PostProductTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UpDateProductType",
				Handler: AdminProductType.UpDateProductTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeleteProductType",
				Handler: AdminProductType.DeleteProductTypeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/AdminProductType"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetAllShopStaffList",
				Handler: AdminShopStaff.GetAllShopStaffListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetShopStaffList",
				Handler: AdminShopStaff.GetShopStaffListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/GetShopAllStaffSumList",
				Handler: AdminShopStaff.GetShopAllStaffSumListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/AdminShopStaff"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetUserList",
				Handler: AdminUser.GetUserListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/AdminUser"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/GetPositionList",
				Handler: AdminPosition.GetPositionListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/PostPosition",
				Handler: AdminPosition.PostPositionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/UpDatePosition",
				Handler: AdminPosition.UpDatePositionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DeletePosition",
				Handler: AdminPosition.DeletePositionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/AdminPosition"),
	)
}
