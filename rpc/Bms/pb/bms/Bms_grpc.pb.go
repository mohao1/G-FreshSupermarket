// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: Bms.proto

package bms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bms_ManageLogin_FullMethodName          = "/bms.Bms/ManageLogin"
	Bms_StaffLogin_FullMethodName           = "/bms.Bms/StaffLogin"
	Bms_PersonalInfo_FullMethodName         = "/bms.Bms/PersonalInfo"
	Bms_GetPositionList_FullMethodName      = "/bms.Bms/GetPositionList"
	Bms_GetEmployeeList_FullMethodName      = "/bms.Bms/GetEmployeeList"
	Bms_SetEmployee_FullMethodName          = "/bms.Bms/SetEmployee"
	Bms_DeleteEmployee_FullMethodName       = "/bms.Bms/DeleteEmployee"
	Bms_UpDateEmployee_FullMethodName       = "/bms.Bms/UpDateEmployee"
	Bms_GetUnreceivedOrder_FullMethodName   = "/bms.Bms/GetUnreceivedOrder"
	Bms_ReceivingOrder_FullMethodName       = "/bms.Bms/ReceivingOrder"
	Bms_UnReceivingOrder_FullMethodName     = "/bms.Bms/UnReceivingOrder"
	Bms_GetReceivedOrder_FullMethodName     = "/bms.Bms/GetReceivedOrder"
	Bms_GetCompleteOrder_FullMethodName     = "/bms.Bms/GetCompleteOrder"
	Bms_GetOrderDetails_FullMethodName      = "/bms.Bms/GetOrderDetails"
	Bms_GetProductTypeList_FullMethodName   = "/bms.Bms/GetProductTypeList"
	Bms_GetProductList_FullMethodName       = "/bms.Bms/GetProductList"
	Bms_GetProductDetails_FullMethodName    = "/bms.Bms/GetProductDetails"
	Bms_ReleaseProduct_FullMethodName       = "/bms.Bms/ReleaseProduct"
	Bms_UpDateProduct_FullMethodName        = "/bms.Bms/UpDateProduct"
	Bms_DeleteProduct_FullMethodName        = "/bms.Bms/DeleteProduct"
	Bms_GetLowProduct_FullMethodName        = "/bms.Bms/GetLowProduct"
	Bms_GetLowProductDetails_FullMethodName = "/bms.Bms/GetLowProductDetails"
	Bms_ReleaseLowProduct_FullMethodName    = "/bms.Bms/ReleaseLowProduct"
	Bms_UpDateLowProduct_FullMethodName     = "/bms.Bms/UpDateLowProduct"
	Bms_DeleteLowProduct_FullMethodName     = "/bms.Bms/DeleteLowProduct"
	Bms_GetOverOrder_FullMethodName         = "/bms.Bms/GetOverOrder"
	Bms_OverOrderHandle_FullMethodName      = "/bms.Bms/OverOrderHandle"
	Bms_GetSalesData_FullMethodName         = "/bms.Bms/GetSalesData"
	Bms_GetOrderData_FullMethodName         = "/bms.Bms/GetOrderData"
	Bms_PostAnnouncement_FullMethodName     = "/bms.Bms/PostAnnouncement"
	Bms_GetAnnouncementList_FullMethodName  = "/bms.Bms/GetAnnouncementList"
	Bms_UpdateAnnouncement_FullMethodName   = "/bms.Bms/UpdateAnnouncement"
	Bms_DeleteAnnouncement_FullMethodName   = "/bms.Bms/DeleteAnnouncement"
)

// BmsClient is the client API for Bms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BmsClient interface {
	// ManageLogin-商户管理员的登录
	ManageLogin(ctx context.Context, in *ManageLoginReq, opts ...grpc.CallOption) (*ManageLoginResp, error)
	// StaffLogin-普通员工登录
	StaffLogin(ctx context.Context, in *StaffLoginReq, opts ...grpc.CallOption) (*StaffLoginResp, error)
	// 获取个人信息
	PersonalInfo(ctx context.Context, in *PersonalInfoReq, opts ...grpc.CallOption) (*PersonalInfoResp, error)
	// 获取身份列表
	GetPositionList(ctx context.Context, in *GetPositionListReq, opts ...grpc.CallOption) (*GetPositionListResp, error)
	// 获取员工列表
	GetEmployeeList(ctx context.Context, in *GetEmployeeListReq, opts ...grpc.CallOption) (*GetEmployeeListResp, error)
	// 设置员工
	SetEmployee(ctx context.Context, in *SetEmployeeReq, opts ...grpc.CallOption) (*SetEmployeeResp, error)
	// 删除员工
	DeleteEmployee(ctx context.Context, in *DeleteEmployeeReq, opts ...grpc.CallOption) (*DeleteEmployeeResp, error)
	// 修改员工信息
	UpDateEmployee(ctx context.Context, in *UpDateEmployeeReq, opts ...grpc.CallOption) (*UpDateEmployeeResp, error)
	// 查看未接订单
	GetUnreceivedOrder(ctx context.Context, in *UnreceivedOrderReq, opts ...grpc.CallOption) (*UnreceivedOrderResp, error)
	// 接单
	ReceivingOrder(ctx context.Context, in *ReceivingOrderReq, opts ...grpc.CallOption) (*ReceivingOrderResp, error)
	// 取消接单
	UnReceivingOrder(ctx context.Context, in *UnReceivingOrderReq, opts ...grpc.CallOption) (*UnReceivingOrderResp, error)
	// 查看已接订单
	GetReceivedOrder(ctx context.Context, in *ReceivedOrderReq, opts ...grpc.CallOption) (*ReceivedOrderResp, error)
	// 查看完成订单
	GetCompleteOrder(ctx context.Context, in *CompleteOrderReq, opts ...grpc.CallOption) (*CompleteOrderResp, error)
	// 查看订单详情
	GetOrderDetails(ctx context.Context, in *OrderDetailsReq, opts ...grpc.CallOption) (*OrderDetailsResp, error)
	// 获取商品类型列表
	GetProductTypeList(ctx context.Context, in *GetProductTypeListReq, opts ...grpc.CallOption) (*GetProductTypeListResp, error)
	// 查看普通商品列表
	GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error)
	// 查看商品详细情况
	GetProductDetails(ctx context.Context, in *GetProductDetailsReq, opts ...grpc.CallOption) (*GetProductDetailsResp, error)
	// 设置发布普通商品
	ReleaseProduct(ctx context.Context, in *ReleaseProductReq, opts ...grpc.CallOption) (*ReleaseProductResp, error)
	// 修改发布普通商品
	UpDateProduct(ctx context.Context, in *UpDateProductReq, opts ...grpc.CallOption) (*UpDateProductResp, error)
	// 删除发布普通商品
	DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error)
	// 查看折扣商品列表
	GetLowProduct(ctx context.Context, in *GetLowProductReq, opts ...grpc.CallOption) (*GetLowProductResp, error)
	// 查看商品详细情况
	GetLowProductDetails(ctx context.Context, in *GetLowProductDetailsReq, opts ...grpc.CallOption) (*GetLowProductDetailsResp, error)
	// 设置发布折扣商品
	ReleaseLowProduct(ctx context.Context, in *ReleaseLowProductReq, opts ...grpc.CallOption) (*ReleaseLowProductResp, error)
	// 修改发布折扣商品
	UpDateLowProduct(ctx context.Context, in *UpDateLowProductReq, opts ...grpc.CallOption) (*UpDateLowProductResp, error)
	// 删除发布折扣商品
	DeleteLowProduct(ctx context.Context, in *DeleteLowProductReq, opts ...grpc.CallOption) (*DeleteLowProductResp, error)
	// 获取申请取消的订单列表
	GetOverOrder(ctx context.Context, in *OverOrderListReq, opts ...grpc.CallOption) (*OverOrderListResp, error)
	// 取消订单申请处理
	OverOrderHandle(ctx context.Context, in *OverOrderHandleReq, opts ...grpc.CallOption) (*OverOrderHandleResp, error)
	// 查看销售数据
	GetSalesData(ctx context.Context, in *SalesDataListReq, opts ...grpc.CallOption) (*SalesDataListResp, error)
	// 查看订单数据
	GetOrderData(ctx context.Context, in *OrderDataReq, opts ...grpc.CallOption) (*OrderDataResp, error)
	// 发布公告
	PostAnnouncement(ctx context.Context, in *AnnouncementReq, opts ...grpc.CallOption) (*AnnouncementResp, error)
	// 获取公告列表
	GetAnnouncementList(ctx context.Context, in *AnnouncementListReq, opts ...grpc.CallOption) (*AnnouncementListResp, error)
	// 更新公告
	UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementReq, opts ...grpc.CallOption) (*UpdateAnnouncementResp, error)
	// 删除公告
	DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementReq, opts ...grpc.CallOption) (*DeleteAnnouncementResp, error)
}

type bmsClient struct {
	cc grpc.ClientConnInterface
}

func NewBmsClient(cc grpc.ClientConnInterface) BmsClient {
	return &bmsClient{cc}
}

func (c *bmsClient) ManageLogin(ctx context.Context, in *ManageLoginReq, opts ...grpc.CallOption) (*ManageLoginResp, error) {
	out := new(ManageLoginResp)
	err := c.cc.Invoke(ctx, Bms_ManageLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) StaffLogin(ctx context.Context, in *StaffLoginReq, opts ...grpc.CallOption) (*StaffLoginResp, error) {
	out := new(StaffLoginResp)
	err := c.cc.Invoke(ctx, Bms_StaffLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) PersonalInfo(ctx context.Context, in *PersonalInfoReq, opts ...grpc.CallOption) (*PersonalInfoResp, error) {
	out := new(PersonalInfoResp)
	err := c.cc.Invoke(ctx, Bms_PersonalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetPositionList(ctx context.Context, in *GetPositionListReq, opts ...grpc.CallOption) (*GetPositionListResp, error) {
	out := new(GetPositionListResp)
	err := c.cc.Invoke(ctx, Bms_GetPositionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetEmployeeList(ctx context.Context, in *GetEmployeeListReq, opts ...grpc.CallOption) (*GetEmployeeListResp, error) {
	out := new(GetEmployeeListResp)
	err := c.cc.Invoke(ctx, Bms_GetEmployeeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) SetEmployee(ctx context.Context, in *SetEmployeeReq, opts ...grpc.CallOption) (*SetEmployeeResp, error) {
	out := new(SetEmployeeResp)
	err := c.cc.Invoke(ctx, Bms_SetEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) DeleteEmployee(ctx context.Context, in *DeleteEmployeeReq, opts ...grpc.CallOption) (*DeleteEmployeeResp, error) {
	out := new(DeleteEmployeeResp)
	err := c.cc.Invoke(ctx, Bms_DeleteEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) UpDateEmployee(ctx context.Context, in *UpDateEmployeeReq, opts ...grpc.CallOption) (*UpDateEmployeeResp, error) {
	out := new(UpDateEmployeeResp)
	err := c.cc.Invoke(ctx, Bms_UpDateEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetUnreceivedOrder(ctx context.Context, in *UnreceivedOrderReq, opts ...grpc.CallOption) (*UnreceivedOrderResp, error) {
	out := new(UnreceivedOrderResp)
	err := c.cc.Invoke(ctx, Bms_GetUnreceivedOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) ReceivingOrder(ctx context.Context, in *ReceivingOrderReq, opts ...grpc.CallOption) (*ReceivingOrderResp, error) {
	out := new(ReceivingOrderResp)
	err := c.cc.Invoke(ctx, Bms_ReceivingOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) UnReceivingOrder(ctx context.Context, in *UnReceivingOrderReq, opts ...grpc.CallOption) (*UnReceivingOrderResp, error) {
	out := new(UnReceivingOrderResp)
	err := c.cc.Invoke(ctx, Bms_UnReceivingOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetReceivedOrder(ctx context.Context, in *ReceivedOrderReq, opts ...grpc.CallOption) (*ReceivedOrderResp, error) {
	out := new(ReceivedOrderResp)
	err := c.cc.Invoke(ctx, Bms_GetReceivedOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetCompleteOrder(ctx context.Context, in *CompleteOrderReq, opts ...grpc.CallOption) (*CompleteOrderResp, error) {
	out := new(CompleteOrderResp)
	err := c.cc.Invoke(ctx, Bms_GetCompleteOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetOrderDetails(ctx context.Context, in *OrderDetailsReq, opts ...grpc.CallOption) (*OrderDetailsResp, error) {
	out := new(OrderDetailsResp)
	err := c.cc.Invoke(ctx, Bms_GetOrderDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetProductTypeList(ctx context.Context, in *GetProductTypeListReq, opts ...grpc.CallOption) (*GetProductTypeListResp, error) {
	out := new(GetProductTypeListResp)
	err := c.cc.Invoke(ctx, Bms_GetProductTypeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error) {
	out := new(GetProductListResp)
	err := c.cc.Invoke(ctx, Bms_GetProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetProductDetails(ctx context.Context, in *GetProductDetailsReq, opts ...grpc.CallOption) (*GetProductDetailsResp, error) {
	out := new(GetProductDetailsResp)
	err := c.cc.Invoke(ctx, Bms_GetProductDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) ReleaseProduct(ctx context.Context, in *ReleaseProductReq, opts ...grpc.CallOption) (*ReleaseProductResp, error) {
	out := new(ReleaseProductResp)
	err := c.cc.Invoke(ctx, Bms_ReleaseProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) UpDateProduct(ctx context.Context, in *UpDateProductReq, opts ...grpc.CallOption) (*UpDateProductResp, error) {
	out := new(UpDateProductResp)
	err := c.cc.Invoke(ctx, Bms_UpDateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error) {
	out := new(DeleteProductResp)
	err := c.cc.Invoke(ctx, Bms_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetLowProduct(ctx context.Context, in *GetLowProductReq, opts ...grpc.CallOption) (*GetLowProductResp, error) {
	out := new(GetLowProductResp)
	err := c.cc.Invoke(ctx, Bms_GetLowProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetLowProductDetails(ctx context.Context, in *GetLowProductDetailsReq, opts ...grpc.CallOption) (*GetLowProductDetailsResp, error) {
	out := new(GetLowProductDetailsResp)
	err := c.cc.Invoke(ctx, Bms_GetLowProductDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) ReleaseLowProduct(ctx context.Context, in *ReleaseLowProductReq, opts ...grpc.CallOption) (*ReleaseLowProductResp, error) {
	out := new(ReleaseLowProductResp)
	err := c.cc.Invoke(ctx, Bms_ReleaseLowProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) UpDateLowProduct(ctx context.Context, in *UpDateLowProductReq, opts ...grpc.CallOption) (*UpDateLowProductResp, error) {
	out := new(UpDateLowProductResp)
	err := c.cc.Invoke(ctx, Bms_UpDateLowProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) DeleteLowProduct(ctx context.Context, in *DeleteLowProductReq, opts ...grpc.CallOption) (*DeleteLowProductResp, error) {
	out := new(DeleteLowProductResp)
	err := c.cc.Invoke(ctx, Bms_DeleteLowProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetOverOrder(ctx context.Context, in *OverOrderListReq, opts ...grpc.CallOption) (*OverOrderListResp, error) {
	out := new(OverOrderListResp)
	err := c.cc.Invoke(ctx, Bms_GetOverOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) OverOrderHandle(ctx context.Context, in *OverOrderHandleReq, opts ...grpc.CallOption) (*OverOrderHandleResp, error) {
	out := new(OverOrderHandleResp)
	err := c.cc.Invoke(ctx, Bms_OverOrderHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetSalesData(ctx context.Context, in *SalesDataListReq, opts ...grpc.CallOption) (*SalesDataListResp, error) {
	out := new(SalesDataListResp)
	err := c.cc.Invoke(ctx, Bms_GetSalesData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetOrderData(ctx context.Context, in *OrderDataReq, opts ...grpc.CallOption) (*OrderDataResp, error) {
	out := new(OrderDataResp)
	err := c.cc.Invoke(ctx, Bms_GetOrderData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) PostAnnouncement(ctx context.Context, in *AnnouncementReq, opts ...grpc.CallOption) (*AnnouncementResp, error) {
	out := new(AnnouncementResp)
	err := c.cc.Invoke(ctx, Bms_PostAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) GetAnnouncementList(ctx context.Context, in *AnnouncementListReq, opts ...grpc.CallOption) (*AnnouncementListResp, error) {
	out := new(AnnouncementListResp)
	err := c.cc.Invoke(ctx, Bms_GetAnnouncementList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementReq, opts ...grpc.CallOption) (*UpdateAnnouncementResp, error) {
	out := new(UpdateAnnouncementResp)
	err := c.cc.Invoke(ctx, Bms_UpdateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmsClient) DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementReq, opts ...grpc.CallOption) (*DeleteAnnouncementResp, error) {
	out := new(DeleteAnnouncementResp)
	err := c.cc.Invoke(ctx, Bms_DeleteAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BmsServer is the server API for Bms service.
// All implementations must embed UnimplementedBmsServer
// for forward compatibility
type BmsServer interface {
	// ManageLogin-商户管理员的登录
	ManageLogin(context.Context, *ManageLoginReq) (*ManageLoginResp, error)
	// StaffLogin-普通员工登录
	StaffLogin(context.Context, *StaffLoginReq) (*StaffLoginResp, error)
	// 获取个人信息
	PersonalInfo(context.Context, *PersonalInfoReq) (*PersonalInfoResp, error)
	// 获取身份列表
	GetPositionList(context.Context, *GetPositionListReq) (*GetPositionListResp, error)
	// 获取员工列表
	GetEmployeeList(context.Context, *GetEmployeeListReq) (*GetEmployeeListResp, error)
	// 设置员工
	SetEmployee(context.Context, *SetEmployeeReq) (*SetEmployeeResp, error)
	// 删除员工
	DeleteEmployee(context.Context, *DeleteEmployeeReq) (*DeleteEmployeeResp, error)
	// 修改员工信息
	UpDateEmployee(context.Context, *UpDateEmployeeReq) (*UpDateEmployeeResp, error)
	// 查看未接订单
	GetUnreceivedOrder(context.Context, *UnreceivedOrderReq) (*UnreceivedOrderResp, error)
	// 接单
	ReceivingOrder(context.Context, *ReceivingOrderReq) (*ReceivingOrderResp, error)
	// 取消接单
	UnReceivingOrder(context.Context, *UnReceivingOrderReq) (*UnReceivingOrderResp, error)
	// 查看已接订单
	GetReceivedOrder(context.Context, *ReceivedOrderReq) (*ReceivedOrderResp, error)
	// 查看完成订单
	GetCompleteOrder(context.Context, *CompleteOrderReq) (*CompleteOrderResp, error)
	// 查看订单详情
	GetOrderDetails(context.Context, *OrderDetailsReq) (*OrderDetailsResp, error)
	// 获取商品类型列表
	GetProductTypeList(context.Context, *GetProductTypeListReq) (*GetProductTypeListResp, error)
	// 查看普通商品列表
	GetProductList(context.Context, *GetProductListReq) (*GetProductListResp, error)
	// 查看商品详细情况
	GetProductDetails(context.Context, *GetProductDetailsReq) (*GetProductDetailsResp, error)
	// 设置发布普通商品
	ReleaseProduct(context.Context, *ReleaseProductReq) (*ReleaseProductResp, error)
	// 修改发布普通商品
	UpDateProduct(context.Context, *UpDateProductReq) (*UpDateProductResp, error)
	// 删除发布普通商品
	DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductResp, error)
	// 查看折扣商品列表
	GetLowProduct(context.Context, *GetLowProductReq) (*GetLowProductResp, error)
	// 查看商品详细情况
	GetLowProductDetails(context.Context, *GetLowProductDetailsReq) (*GetLowProductDetailsResp, error)
	// 设置发布折扣商品
	ReleaseLowProduct(context.Context, *ReleaseLowProductReq) (*ReleaseLowProductResp, error)
	// 修改发布折扣商品
	UpDateLowProduct(context.Context, *UpDateLowProductReq) (*UpDateLowProductResp, error)
	// 删除发布折扣商品
	DeleteLowProduct(context.Context, *DeleteLowProductReq) (*DeleteLowProductResp, error)
	// 获取申请取消的订单列表
	GetOverOrder(context.Context, *OverOrderListReq) (*OverOrderListResp, error)
	// 取消订单申请处理
	OverOrderHandle(context.Context, *OverOrderHandleReq) (*OverOrderHandleResp, error)
	// 查看销售数据
	GetSalesData(context.Context, *SalesDataListReq) (*SalesDataListResp, error)
	// 查看订单数据
	GetOrderData(context.Context, *OrderDataReq) (*OrderDataResp, error)
	// 发布公告
	PostAnnouncement(context.Context, *AnnouncementReq) (*AnnouncementResp, error)
	// 获取公告列表
	GetAnnouncementList(context.Context, *AnnouncementListReq) (*AnnouncementListResp, error)
	// 更新公告
	UpdateAnnouncement(context.Context, *UpdateAnnouncementReq) (*UpdateAnnouncementResp, error)
	// 删除公告
	DeleteAnnouncement(context.Context, *DeleteAnnouncementReq) (*DeleteAnnouncementResp, error)
	mustEmbedUnimplementedBmsServer()
}

// UnimplementedBmsServer must be embedded to have forward compatible implementations.
type UnimplementedBmsServer struct {
}

func (UnimplementedBmsServer) ManageLogin(context.Context, *ManageLoginReq) (*ManageLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageLogin not implemented")
}
func (UnimplementedBmsServer) StaffLogin(context.Context, *StaffLoginReq) (*StaffLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffLogin not implemented")
}
func (UnimplementedBmsServer) PersonalInfo(context.Context, *PersonalInfoReq) (*PersonalInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalInfo not implemented")
}
func (UnimplementedBmsServer) GetPositionList(context.Context, *GetPositionListReq) (*GetPositionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionList not implemented")
}
func (UnimplementedBmsServer) GetEmployeeList(context.Context, *GetEmployeeListReq) (*GetEmployeeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeList not implemented")
}
func (UnimplementedBmsServer) SetEmployee(context.Context, *SetEmployeeReq) (*SetEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmployee not implemented")
}
func (UnimplementedBmsServer) DeleteEmployee(context.Context, *DeleteEmployeeReq) (*DeleteEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedBmsServer) UpDateEmployee(context.Context, *UpDateEmployeeReq) (*UpDateEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDateEmployee not implemented")
}
func (UnimplementedBmsServer) GetUnreceivedOrder(context.Context, *UnreceivedOrderReq) (*UnreceivedOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreceivedOrder not implemented")
}
func (UnimplementedBmsServer) ReceivingOrder(context.Context, *ReceivingOrderReq) (*ReceivingOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivingOrder not implemented")
}
func (UnimplementedBmsServer) UnReceivingOrder(context.Context, *UnReceivingOrderReq) (*UnReceivingOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnReceivingOrder not implemented")
}
func (UnimplementedBmsServer) GetReceivedOrder(context.Context, *ReceivedOrderReq) (*ReceivedOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedOrder not implemented")
}
func (UnimplementedBmsServer) GetCompleteOrder(context.Context, *CompleteOrderReq) (*CompleteOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompleteOrder not implemented")
}
func (UnimplementedBmsServer) GetOrderDetails(context.Context, *OrderDetailsReq) (*OrderDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDetails not implemented")
}
func (UnimplementedBmsServer) GetProductTypeList(context.Context, *GetProductTypeListReq) (*GetProductTypeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductTypeList not implemented")
}
func (UnimplementedBmsServer) GetProductList(context.Context, *GetProductListReq) (*GetProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedBmsServer) GetProductDetails(context.Context, *GetProductDetailsReq) (*GetProductDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetails not implemented")
}
func (UnimplementedBmsServer) ReleaseProduct(context.Context, *ReleaseProductReq) (*ReleaseProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseProduct not implemented")
}
func (UnimplementedBmsServer) UpDateProduct(context.Context, *UpDateProductReq) (*UpDateProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDateProduct not implemented")
}
func (UnimplementedBmsServer) DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedBmsServer) GetLowProduct(context.Context, *GetLowProductReq) (*GetLowProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowProduct not implemented")
}
func (UnimplementedBmsServer) GetLowProductDetails(context.Context, *GetLowProductDetailsReq) (*GetLowProductDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowProductDetails not implemented")
}
func (UnimplementedBmsServer) ReleaseLowProduct(context.Context, *ReleaseLowProductReq) (*ReleaseLowProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLowProduct not implemented")
}
func (UnimplementedBmsServer) UpDateLowProduct(context.Context, *UpDateLowProductReq) (*UpDateLowProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDateLowProduct not implemented")
}
func (UnimplementedBmsServer) DeleteLowProduct(context.Context, *DeleteLowProductReq) (*DeleteLowProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLowProduct not implemented")
}
func (UnimplementedBmsServer) GetOverOrder(context.Context, *OverOrderListReq) (*OverOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverOrder not implemented")
}
func (UnimplementedBmsServer) OverOrderHandle(context.Context, *OverOrderHandleReq) (*OverOrderHandleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverOrderHandle not implemented")
}
func (UnimplementedBmsServer) GetSalesData(context.Context, *SalesDataListReq) (*SalesDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesData not implemented")
}
func (UnimplementedBmsServer) GetOrderData(context.Context, *OrderDataReq) (*OrderDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderData not implemented")
}
func (UnimplementedBmsServer) PostAnnouncement(context.Context, *AnnouncementReq) (*AnnouncementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAnnouncement not implemented")
}
func (UnimplementedBmsServer) GetAnnouncementList(context.Context, *AnnouncementListReq) (*AnnouncementListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementList not implemented")
}
func (UnimplementedBmsServer) UpdateAnnouncement(context.Context, *UpdateAnnouncementReq) (*UpdateAnnouncementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnouncement not implemented")
}
func (UnimplementedBmsServer) DeleteAnnouncement(context.Context, *DeleteAnnouncementReq) (*DeleteAnnouncementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncement not implemented")
}
func (UnimplementedBmsServer) mustEmbedUnimplementedBmsServer() {}

// UnsafeBmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BmsServer will
// result in compilation errors.
type UnsafeBmsServer interface {
	mustEmbedUnimplementedBmsServer()
}

func RegisterBmsServer(s grpc.ServiceRegistrar, srv BmsServer) {
	s.RegisterService(&Bms_ServiceDesc, srv)
}

func _Bms_ManageLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).ManageLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_ManageLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).ManageLogin(ctx, req.(*ManageLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_StaffLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).StaffLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_StaffLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).StaffLogin(ctx, req.(*StaffLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_PersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).PersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_PersonalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).PersonalInfo(ctx, req.(*PersonalInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetPositionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetPositionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetPositionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetPositionList(ctx, req.(*GetPositionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetEmployeeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetEmployeeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetEmployeeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetEmployeeList(ctx, req.(*GetEmployeeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_SetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).SetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_SetEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).SetEmployee(ctx, req.(*SetEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_DeleteEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).DeleteEmployee(ctx, req.(*DeleteEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_UpDateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDateEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).UpDateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_UpDateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).UpDateEmployee(ctx, req.(*UpDateEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetUnreceivedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreceivedOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetUnreceivedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetUnreceivedOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetUnreceivedOrder(ctx, req.(*UnreceivedOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_ReceivingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivingOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).ReceivingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_ReceivingOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).ReceivingOrder(ctx, req.(*ReceivingOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_UnReceivingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnReceivingOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).UnReceivingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_UnReceivingOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).UnReceivingOrder(ctx, req.(*UnReceivingOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetReceivedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetReceivedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetReceivedOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetReceivedOrder(ctx, req.(*ReceivedOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetCompleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetCompleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetCompleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetCompleteOrder(ctx, req.(*CompleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetOrderDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetOrderDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetOrderDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetOrderDetails(ctx, req.(*OrderDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetProductTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductTypeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetProductTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetProductTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetProductTypeList(ctx, req.(*GetProductTypeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetProductList(ctx, req.(*GetProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetProductDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetProductDetails(ctx, req.(*GetProductDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_ReleaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).ReleaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_ReleaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).ReleaseProduct(ctx, req.(*ReleaseProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_UpDateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).UpDateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_UpDateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).UpDateProduct(ctx, req.(*UpDateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).DeleteProduct(ctx, req.(*DeleteProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetLowProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLowProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetLowProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetLowProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetLowProduct(ctx, req.(*GetLowProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetLowProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLowProductDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetLowProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetLowProductDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetLowProductDetails(ctx, req.(*GetLowProductDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_ReleaseLowProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLowProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).ReleaseLowProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_ReleaseLowProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).ReleaseLowProduct(ctx, req.(*ReleaseLowProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_UpDateLowProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDateLowProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).UpDateLowProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_UpDateLowProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).UpDateLowProduct(ctx, req.(*UpDateLowProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_DeleteLowProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLowProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).DeleteLowProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_DeleteLowProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).DeleteLowProduct(ctx, req.(*DeleteLowProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetOverOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetOverOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetOverOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetOverOrder(ctx, req.(*OverOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_OverOrderHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverOrderHandleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).OverOrderHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_OverOrderHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).OverOrderHandle(ctx, req.(*OverOrderHandleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetSalesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesDataListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetSalesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetSalesData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetSalesData(ctx, req.(*SalesDataListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetOrderData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetOrderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetOrderData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetOrderData(ctx, req.(*OrderDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_PostAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).PostAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_PostAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).PostAnnouncement(ctx, req.(*AnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_GetAnnouncementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnouncementListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).GetAnnouncementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_GetAnnouncementList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).GetAnnouncementList(ctx, req.(*AnnouncementListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_UpdateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).UpdateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_UpdateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).UpdateAnnouncement(ctx, req.(*UpdateAnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bms_DeleteAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmsServer).DeleteAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bms_DeleteAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmsServer).DeleteAnnouncement(ctx, req.(*DeleteAnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bms_ServiceDesc is the grpc.ServiceDesc for Bms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bms.Bms",
	HandlerType: (*BmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManageLogin",
			Handler:    _Bms_ManageLogin_Handler,
		},
		{
			MethodName: "StaffLogin",
			Handler:    _Bms_StaffLogin_Handler,
		},
		{
			MethodName: "PersonalInfo",
			Handler:    _Bms_PersonalInfo_Handler,
		},
		{
			MethodName: "GetPositionList",
			Handler:    _Bms_GetPositionList_Handler,
		},
		{
			MethodName: "GetEmployeeList",
			Handler:    _Bms_GetEmployeeList_Handler,
		},
		{
			MethodName: "SetEmployee",
			Handler:    _Bms_SetEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _Bms_DeleteEmployee_Handler,
		},
		{
			MethodName: "UpDateEmployee",
			Handler:    _Bms_UpDateEmployee_Handler,
		},
		{
			MethodName: "GetUnreceivedOrder",
			Handler:    _Bms_GetUnreceivedOrder_Handler,
		},
		{
			MethodName: "ReceivingOrder",
			Handler:    _Bms_ReceivingOrder_Handler,
		},
		{
			MethodName: "UnReceivingOrder",
			Handler:    _Bms_UnReceivingOrder_Handler,
		},
		{
			MethodName: "GetReceivedOrder",
			Handler:    _Bms_GetReceivedOrder_Handler,
		},
		{
			MethodName: "GetCompleteOrder",
			Handler:    _Bms_GetCompleteOrder_Handler,
		},
		{
			MethodName: "GetOrderDetails",
			Handler:    _Bms_GetOrderDetails_Handler,
		},
		{
			MethodName: "GetProductTypeList",
			Handler:    _Bms_GetProductTypeList_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _Bms_GetProductList_Handler,
		},
		{
			MethodName: "GetProductDetails",
			Handler:    _Bms_GetProductDetails_Handler,
		},
		{
			MethodName: "ReleaseProduct",
			Handler:    _Bms_ReleaseProduct_Handler,
		},
		{
			MethodName: "UpDateProduct",
			Handler:    _Bms_UpDateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Bms_DeleteProduct_Handler,
		},
		{
			MethodName: "GetLowProduct",
			Handler:    _Bms_GetLowProduct_Handler,
		},
		{
			MethodName: "GetLowProductDetails",
			Handler:    _Bms_GetLowProductDetails_Handler,
		},
		{
			MethodName: "ReleaseLowProduct",
			Handler:    _Bms_ReleaseLowProduct_Handler,
		},
		{
			MethodName: "UpDateLowProduct",
			Handler:    _Bms_UpDateLowProduct_Handler,
		},
		{
			MethodName: "DeleteLowProduct",
			Handler:    _Bms_DeleteLowProduct_Handler,
		},
		{
			MethodName: "GetOverOrder",
			Handler:    _Bms_GetOverOrder_Handler,
		},
		{
			MethodName: "OverOrderHandle",
			Handler:    _Bms_OverOrderHandle_Handler,
		},
		{
			MethodName: "GetSalesData",
			Handler:    _Bms_GetSalesData_Handler,
		},
		{
			MethodName: "GetOrderData",
			Handler:    _Bms_GetOrderData_Handler,
		},
		{
			MethodName: "PostAnnouncement",
			Handler:    _Bms_PostAnnouncement_Handler,
		},
		{
			MethodName: "GetAnnouncementList",
			Handler:    _Bms_GetAnnouncementList_Handler,
		},
		{
			MethodName: "UpdateAnnouncement",
			Handler:    _Bms_UpdateAnnouncement_Handler,
		},
		{
			MethodName: "DeleteAnnouncement",
			Handler:    _Bms_DeleteAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Bms.proto",
}
