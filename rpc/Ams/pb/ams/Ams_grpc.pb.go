// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: Ams.proto

package ams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ams_AdminLogin_FullMethodName               = "/ams.Ams/AdminLogin"
	Ams_AdminUpdateLoginPassWord_FullMethodName = "/ams.Ams/AdminUpdateLoginPassWord"
	Ams_GetShopList_FullMethodName              = "/ams.Ams/GetShopList"
	Ams_PostShop_FullMethodName                 = "/ams.Ams/PostShop"
	Ams_PostAdmin_FullMethodName                = "/ams.Ams/PostAdmin"
	Ams_GetAdmin_FullMethodName                 = "/ams.Ams/GetAdmin"
	Ams_DeleteAdmin_FullMethodName              = "/ams.Ams/DeleteAdmin"
	Ams_PostShopAdmin_FullMethodName            = "/ams.Ams/PostShopAdmin"
	Ams_DeleteShopAdmin_FullMethodName          = "/ams.Ams/DeleteShopAdmin"
	Ams_GetShopAdmin_FullMethodName             = "/ams.Ams/GetShopAdmin"
	Ams_UpDateShop_FullMethodName               = "/ams.Ams/UpDateShop"
	Ams_DeleteShop_FullMethodName               = "/ams.Ams/DeleteShop"
	Ams_GetProductTypeList_FullMethodName       = "/ams.Ams/GetProductTypeList"
	Ams_PostProductType_FullMethodName          = "/ams.Ams/PostProductType"
	Ams_UpDateProductType_FullMethodName        = "/ams.Ams/UpDateProductType"
	Ams_DeleteProductType_FullMethodName        = "/ams.Ams/DeleteProductType"
	Ams_GetAllShopStaffList_FullMethodName      = "/ams.Ams/GetAllShopStaffList"
	Ams_GetShopStaffList_FullMethodName         = "/ams.Ams/GetShopStaffList"
	Ams_GetShopAllStaffSumList_FullMethodName   = "/ams.Ams/GetShopAllStaffSumList"
	Ams_GetUserList_FullMethodName              = "/ams.Ams/GetUserList"
	Ams_GetPositionList_FullMethodName          = "/ams.Ams/GetPositionList"
	Ams_PostPosition_FullMethodName             = "/ams.Ams/PostPosition"
	Ams_UpDatePosition_FullMethodName           = "/ams.Ams/UpDatePosition"
	Ams_DeletePosition_FullMethodName           = "/ams.Ams/DeletePosition"
)

// AmsClient is the client API for Ams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmsClient interface {
	// 系统管理人员登录
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	// 修改密码
	AdminUpdateLoginPassWord(ctx context.Context, in *UpdateLoginPassWordReq, opts ...grpc.CallOption) (*UpdateLoginPassWordResp, error)
	// 获取店铺列表
	GetShopList(ctx context.Context, in *GetShopListReq, opts ...grpc.CallOption) (*GetShopListResp, error)
	// 店铺信息添加
	PostShop(ctx context.Context, in *PostShopReq, opts ...grpc.CallOption) (*PostShopResp, error)
	// 创建管理账号
	PostAdmin(ctx context.Context, in *PostAdminReq, opts ...grpc.CallOption) (*PostAdminResp, error)
	// 查看可用管理账号
	GetAdmin(ctx context.Context, in *GetAdminReq, opts ...grpc.CallOption) (*GetAdminResp, error)
	// 删除可用管理账号
	DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*DeleteAdminResp, error)
	// 设置店铺的管理员
	PostShopAdmin(ctx context.Context, in *PostShopAdminReq, opts ...grpc.CallOption) (*PostShopAdminResp, error)
	// 删除店铺的管理员
	DeleteShopAdmin(ctx context.Context, in *DeleteShopAdminReq, opts ...grpc.CallOption) (*DeleteShopAdminResp, error)
	// 查看店铺的管理员
	GetShopAdmin(ctx context.Context, in *GetShopAdminReq, opts ...grpc.CallOption) (*GetShopAdminResp, error)
	// 店铺信息修改
	UpDateShop(ctx context.Context, in *UpDateShopReq, opts ...grpc.CallOption) (*UpDateShopResp, error)
	// 删除店铺
	DeleteShop(ctx context.Context, in *DeleteShopReq, opts ...grpc.CallOption) (*DeleteShopResp, error)
	// 获取商品类型列表
	GetProductTypeList(ctx context.Context, in *GetProductTypeListReq, opts ...grpc.CallOption) (*GetProductTypeListResp, error)
	// 设置商品类型
	PostProductType(ctx context.Context, in *PostProductTypeReq, opts ...grpc.CallOption) (*PostProductTypeResp, error)
	// 修改商品类型
	UpDateProductType(ctx context.Context, in *UpDateProductTypeReq, opts ...grpc.CallOption) (*UpDateProductTypeResp, error)
	// 删除商品类型
	DeleteProductType(ctx context.Context, in *DeleteProductTypeReq, opts ...grpc.CallOption) (*DeleteProductTypeResp, error)
	// 查看全部店铺员工列表
	GetAllShopStaffList(ctx context.Context, in *GetAllShopStaffListReq, opts ...grpc.CallOption) (*GetAllShopStaffListResp, error)
	// 店铺查询人员列表
	GetShopStaffList(ctx context.Context, in *GetShopStaffListReq, opts ...grpc.CallOption) (*GetShopStaffListResp, error)
	// 各个门店人数统计
	GetShopAllStaffSumList(ctx context.Context, in *GetShopAllStaffSumListReq, opts ...grpc.CallOption) (*GetShopAllStaffSumListResp, error)
	// 用户信息列表
	GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error)
	// 身份信息列表查看
	GetPositionList(ctx context.Context, in *GetPositionListReq, opts ...grpc.CallOption) (*GetPositionListResp, error)
	// 身份信息设置
	PostPosition(ctx context.Context, in *PostPositionReq, opts ...grpc.CallOption) (*PostPositionResp, error)
	// 身份信息修改
	UpDatePosition(ctx context.Context, in *UpDatePositionReq, opts ...grpc.CallOption) (*UpDatePositionResp, error)
	// 身份信息删除
	DeletePosition(ctx context.Context, in *DeletePositionReq, opts ...grpc.CallOption) (*DeletePositionResp, error)
}

type amsClient struct {
	cc grpc.ClientConnInterface
}

func NewAmsClient(cc grpc.ClientConnInterface) AmsClient {
	return &amsClient{cc}
}

func (c *amsClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, Ams_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) AdminUpdateLoginPassWord(ctx context.Context, in *UpdateLoginPassWordReq, opts ...grpc.CallOption) (*UpdateLoginPassWordResp, error) {
	out := new(UpdateLoginPassWordResp)
	err := c.cc.Invoke(ctx, Ams_AdminUpdateLoginPassWord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetShopList(ctx context.Context, in *GetShopListReq, opts ...grpc.CallOption) (*GetShopListResp, error) {
	out := new(GetShopListResp)
	err := c.cc.Invoke(ctx, Ams_GetShopList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) PostShop(ctx context.Context, in *PostShopReq, opts ...grpc.CallOption) (*PostShopResp, error) {
	out := new(PostShopResp)
	err := c.cc.Invoke(ctx, Ams_PostShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) PostAdmin(ctx context.Context, in *PostAdminReq, opts ...grpc.CallOption) (*PostAdminResp, error) {
	out := new(PostAdminResp)
	err := c.cc.Invoke(ctx, Ams_PostAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetAdmin(ctx context.Context, in *GetAdminReq, opts ...grpc.CallOption) (*GetAdminResp, error) {
	out := new(GetAdminResp)
	err := c.cc.Invoke(ctx, Ams_GetAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*DeleteAdminResp, error) {
	out := new(DeleteAdminResp)
	err := c.cc.Invoke(ctx, Ams_DeleteAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) PostShopAdmin(ctx context.Context, in *PostShopAdminReq, opts ...grpc.CallOption) (*PostShopAdminResp, error) {
	out := new(PostShopAdminResp)
	err := c.cc.Invoke(ctx, Ams_PostShopAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) DeleteShopAdmin(ctx context.Context, in *DeleteShopAdminReq, opts ...grpc.CallOption) (*DeleteShopAdminResp, error) {
	out := new(DeleteShopAdminResp)
	err := c.cc.Invoke(ctx, Ams_DeleteShopAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetShopAdmin(ctx context.Context, in *GetShopAdminReq, opts ...grpc.CallOption) (*GetShopAdminResp, error) {
	out := new(GetShopAdminResp)
	err := c.cc.Invoke(ctx, Ams_GetShopAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) UpDateShop(ctx context.Context, in *UpDateShopReq, opts ...grpc.CallOption) (*UpDateShopResp, error) {
	out := new(UpDateShopResp)
	err := c.cc.Invoke(ctx, Ams_UpDateShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) DeleteShop(ctx context.Context, in *DeleteShopReq, opts ...grpc.CallOption) (*DeleteShopResp, error) {
	out := new(DeleteShopResp)
	err := c.cc.Invoke(ctx, Ams_DeleteShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetProductTypeList(ctx context.Context, in *GetProductTypeListReq, opts ...grpc.CallOption) (*GetProductTypeListResp, error) {
	out := new(GetProductTypeListResp)
	err := c.cc.Invoke(ctx, Ams_GetProductTypeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) PostProductType(ctx context.Context, in *PostProductTypeReq, opts ...grpc.CallOption) (*PostProductTypeResp, error) {
	out := new(PostProductTypeResp)
	err := c.cc.Invoke(ctx, Ams_PostProductType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) UpDateProductType(ctx context.Context, in *UpDateProductTypeReq, opts ...grpc.CallOption) (*UpDateProductTypeResp, error) {
	out := new(UpDateProductTypeResp)
	err := c.cc.Invoke(ctx, Ams_UpDateProductType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) DeleteProductType(ctx context.Context, in *DeleteProductTypeReq, opts ...grpc.CallOption) (*DeleteProductTypeResp, error) {
	out := new(DeleteProductTypeResp)
	err := c.cc.Invoke(ctx, Ams_DeleteProductType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetAllShopStaffList(ctx context.Context, in *GetAllShopStaffListReq, opts ...grpc.CallOption) (*GetAllShopStaffListResp, error) {
	out := new(GetAllShopStaffListResp)
	err := c.cc.Invoke(ctx, Ams_GetAllShopStaffList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetShopStaffList(ctx context.Context, in *GetShopStaffListReq, opts ...grpc.CallOption) (*GetShopStaffListResp, error) {
	out := new(GetShopStaffListResp)
	err := c.cc.Invoke(ctx, Ams_GetShopStaffList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetShopAllStaffSumList(ctx context.Context, in *GetShopAllStaffSumListReq, opts ...grpc.CallOption) (*GetShopAllStaffSumListResp, error) {
	out := new(GetShopAllStaffSumListResp)
	err := c.cc.Invoke(ctx, Ams_GetShopAllStaffSumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error) {
	out := new(GetUserListResp)
	err := c.cc.Invoke(ctx, Ams_GetUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) GetPositionList(ctx context.Context, in *GetPositionListReq, opts ...grpc.CallOption) (*GetPositionListResp, error) {
	out := new(GetPositionListResp)
	err := c.cc.Invoke(ctx, Ams_GetPositionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) PostPosition(ctx context.Context, in *PostPositionReq, opts ...grpc.CallOption) (*PostPositionResp, error) {
	out := new(PostPositionResp)
	err := c.cc.Invoke(ctx, Ams_PostPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) UpDatePosition(ctx context.Context, in *UpDatePositionReq, opts ...grpc.CallOption) (*UpDatePositionResp, error) {
	out := new(UpDatePositionResp)
	err := c.cc.Invoke(ctx, Ams_UpDatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amsClient) DeletePosition(ctx context.Context, in *DeletePositionReq, opts ...grpc.CallOption) (*DeletePositionResp, error) {
	out := new(DeletePositionResp)
	err := c.cc.Invoke(ctx, Ams_DeletePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmsServer is the server API for Ams service.
// All implementations must embed UnimplementedAmsServer
// for forward compatibility
type AmsServer interface {
	// 系统管理人员登录
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	// 修改密码
	AdminUpdateLoginPassWord(context.Context, *UpdateLoginPassWordReq) (*UpdateLoginPassWordResp, error)
	// 获取店铺列表
	GetShopList(context.Context, *GetShopListReq) (*GetShopListResp, error)
	// 店铺信息添加
	PostShop(context.Context, *PostShopReq) (*PostShopResp, error)
	// 创建管理账号
	PostAdmin(context.Context, *PostAdminReq) (*PostAdminResp, error)
	// 查看可用管理账号
	GetAdmin(context.Context, *GetAdminReq) (*GetAdminResp, error)
	// 删除可用管理账号
	DeleteAdmin(context.Context, *DeleteAdminReq) (*DeleteAdminResp, error)
	// 设置店铺的管理员
	PostShopAdmin(context.Context, *PostShopAdminReq) (*PostShopAdminResp, error)
	// 删除店铺的管理员
	DeleteShopAdmin(context.Context, *DeleteShopAdminReq) (*DeleteShopAdminResp, error)
	// 查看店铺的管理员
	GetShopAdmin(context.Context, *GetShopAdminReq) (*GetShopAdminResp, error)
	// 店铺信息修改
	UpDateShop(context.Context, *UpDateShopReq) (*UpDateShopResp, error)
	// 删除店铺
	DeleteShop(context.Context, *DeleteShopReq) (*DeleteShopResp, error)
	// 获取商品类型列表
	GetProductTypeList(context.Context, *GetProductTypeListReq) (*GetProductTypeListResp, error)
	// 设置商品类型
	PostProductType(context.Context, *PostProductTypeReq) (*PostProductTypeResp, error)
	// 修改商品类型
	UpDateProductType(context.Context, *UpDateProductTypeReq) (*UpDateProductTypeResp, error)
	// 删除商品类型
	DeleteProductType(context.Context, *DeleteProductTypeReq) (*DeleteProductTypeResp, error)
	// 查看全部店铺员工列表
	GetAllShopStaffList(context.Context, *GetAllShopStaffListReq) (*GetAllShopStaffListResp, error)
	// 店铺查询人员列表
	GetShopStaffList(context.Context, *GetShopStaffListReq) (*GetShopStaffListResp, error)
	// 各个门店人数统计
	GetShopAllStaffSumList(context.Context, *GetShopAllStaffSumListReq) (*GetShopAllStaffSumListResp, error)
	// 用户信息列表
	GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error)
	// 身份信息列表查看
	GetPositionList(context.Context, *GetPositionListReq) (*GetPositionListResp, error)
	// 身份信息设置
	PostPosition(context.Context, *PostPositionReq) (*PostPositionResp, error)
	// 身份信息修改
	UpDatePosition(context.Context, *UpDatePositionReq) (*UpDatePositionResp, error)
	// 身份信息删除
	DeletePosition(context.Context, *DeletePositionReq) (*DeletePositionResp, error)
	mustEmbedUnimplementedAmsServer()
}

// UnimplementedAmsServer must be embedded to have forward compatible implementations.
type UnimplementedAmsServer struct {
}

func (UnimplementedAmsServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAmsServer) AdminUpdateLoginPassWord(context.Context, *UpdateLoginPassWordReq) (*UpdateLoginPassWordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateLoginPassWord not implemented")
}
func (UnimplementedAmsServer) GetShopList(context.Context, *GetShopListReq) (*GetShopListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopList not implemented")
}
func (UnimplementedAmsServer) PostShop(context.Context, *PostShopReq) (*PostShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostShop not implemented")
}
func (UnimplementedAmsServer) PostAdmin(context.Context, *PostAdminReq) (*PostAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAdmin not implemented")
}
func (UnimplementedAmsServer) GetAdmin(context.Context, *GetAdminReq) (*GetAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (UnimplementedAmsServer) DeleteAdmin(context.Context, *DeleteAdminReq) (*DeleteAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedAmsServer) PostShopAdmin(context.Context, *PostShopAdminReq) (*PostShopAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostShopAdmin not implemented")
}
func (UnimplementedAmsServer) DeleteShopAdmin(context.Context, *DeleteShopAdminReq) (*DeleteShopAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShopAdmin not implemented")
}
func (UnimplementedAmsServer) GetShopAdmin(context.Context, *GetShopAdminReq) (*GetShopAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopAdmin not implemented")
}
func (UnimplementedAmsServer) UpDateShop(context.Context, *UpDateShopReq) (*UpDateShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDateShop not implemented")
}
func (UnimplementedAmsServer) DeleteShop(context.Context, *DeleteShopReq) (*DeleteShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedAmsServer) GetProductTypeList(context.Context, *GetProductTypeListReq) (*GetProductTypeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductTypeList not implemented")
}
func (UnimplementedAmsServer) PostProductType(context.Context, *PostProductTypeReq) (*PostProductTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProductType not implemented")
}
func (UnimplementedAmsServer) UpDateProductType(context.Context, *UpDateProductTypeReq) (*UpDateProductTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDateProductType not implemented")
}
func (UnimplementedAmsServer) DeleteProductType(context.Context, *DeleteProductTypeReq) (*DeleteProductTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductType not implemented")
}
func (UnimplementedAmsServer) GetAllShopStaffList(context.Context, *GetAllShopStaffListReq) (*GetAllShopStaffListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShopStaffList not implemented")
}
func (UnimplementedAmsServer) GetShopStaffList(context.Context, *GetShopStaffListReq) (*GetShopStaffListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopStaffList not implemented")
}
func (UnimplementedAmsServer) GetShopAllStaffSumList(context.Context, *GetShopAllStaffSumListReq) (*GetShopAllStaffSumListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopAllStaffSumList not implemented")
}
func (UnimplementedAmsServer) GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedAmsServer) GetPositionList(context.Context, *GetPositionListReq) (*GetPositionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionList not implemented")
}
func (UnimplementedAmsServer) PostPosition(context.Context, *PostPositionReq) (*PostPositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPosition not implemented")
}
func (UnimplementedAmsServer) UpDatePosition(context.Context, *UpDatePositionReq) (*UpDatePositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDatePosition not implemented")
}
func (UnimplementedAmsServer) DeletePosition(context.Context, *DeletePositionReq) (*DeletePositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosition not implemented")
}
func (UnimplementedAmsServer) mustEmbedUnimplementedAmsServer() {}

// UnsafeAmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmsServer will
// result in compilation errors.
type UnsafeAmsServer interface {
	mustEmbedUnimplementedAmsServer()
}

func RegisterAmsServer(s grpc.ServiceRegistrar, srv AmsServer) {
	s.RegisterService(&Ams_ServiceDesc, srv)
}

func _Ams_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_AdminUpdateLoginPassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginPassWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).AdminUpdateLoginPassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_AdminUpdateLoginPassWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).AdminUpdateLoginPassWord(ctx, req.(*UpdateLoginPassWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetShopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetShopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetShopList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetShopList(ctx, req.(*GetShopListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_PostShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).PostShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_PostShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).PostShop(ctx, req.(*PostShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_PostAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).PostAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_PostAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).PostAdmin(ctx, req.(*PostAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetAdmin(ctx, req.(*GetAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_DeleteAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).DeleteAdmin(ctx, req.(*DeleteAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_PostShopAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostShopAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).PostShopAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_PostShopAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).PostShopAdmin(ctx, req.(*PostShopAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_DeleteShopAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).DeleteShopAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_DeleteShopAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).DeleteShopAdmin(ctx, req.(*DeleteShopAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetShopAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetShopAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetShopAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetShopAdmin(ctx, req.(*GetShopAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_UpDateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDateShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).UpDateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_UpDateShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).UpDateShop(ctx, req.(*UpDateShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_DeleteShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).DeleteShop(ctx, req.(*DeleteShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetProductTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductTypeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetProductTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetProductTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetProductTypeList(ctx, req.(*GetProductTypeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_PostProductType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProductTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).PostProductType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_PostProductType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).PostProductType(ctx, req.(*PostProductTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_UpDateProductType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDateProductTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).UpDateProductType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_UpDateProductType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).UpDateProductType(ctx, req.(*UpDateProductTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_DeleteProductType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).DeleteProductType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_DeleteProductType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).DeleteProductType(ctx, req.(*DeleteProductTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetAllShopStaffList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShopStaffListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetAllShopStaffList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetAllShopStaffList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetAllShopStaffList(ctx, req.(*GetAllShopStaffListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetShopStaffList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopStaffListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetShopStaffList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetShopStaffList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetShopStaffList(ctx, req.(*GetShopStaffListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetShopAllStaffSumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopAllStaffSumListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetShopAllStaffSumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetShopAllStaffSumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetShopAllStaffSumList(ctx, req.(*GetShopAllStaffSumListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetUserList(ctx, req.(*GetUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_GetPositionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).GetPositionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_GetPositionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).GetPositionList(ctx, req.(*GetPositionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_PostPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).PostPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_PostPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).PostPosition(ctx, req.(*PostPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_UpDatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDatePositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).UpDatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_UpDatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).UpDatePosition(ctx, req.(*UpDatePositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ams_DeletePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmsServer).DeletePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ams_DeletePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmsServer).DeletePosition(ctx, req.(*DeletePositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ams_ServiceDesc is the grpc.ServiceDesc for Ams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ams.Ams",
	HandlerType: (*AmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _Ams_AdminLogin_Handler,
		},
		{
			MethodName: "AdminUpdateLoginPassWord",
			Handler:    _Ams_AdminUpdateLoginPassWord_Handler,
		},
		{
			MethodName: "GetShopList",
			Handler:    _Ams_GetShopList_Handler,
		},
		{
			MethodName: "PostShop",
			Handler:    _Ams_PostShop_Handler,
		},
		{
			MethodName: "PostAdmin",
			Handler:    _Ams_PostAdmin_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _Ams_GetAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _Ams_DeleteAdmin_Handler,
		},
		{
			MethodName: "PostShopAdmin",
			Handler:    _Ams_PostShopAdmin_Handler,
		},
		{
			MethodName: "DeleteShopAdmin",
			Handler:    _Ams_DeleteShopAdmin_Handler,
		},
		{
			MethodName: "GetShopAdmin",
			Handler:    _Ams_GetShopAdmin_Handler,
		},
		{
			MethodName: "UpDateShop",
			Handler:    _Ams_UpDateShop_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _Ams_DeleteShop_Handler,
		},
		{
			MethodName: "GetProductTypeList",
			Handler:    _Ams_GetProductTypeList_Handler,
		},
		{
			MethodName: "PostProductType",
			Handler:    _Ams_PostProductType_Handler,
		},
		{
			MethodName: "UpDateProductType",
			Handler:    _Ams_UpDateProductType_Handler,
		},
		{
			MethodName: "DeleteProductType",
			Handler:    _Ams_DeleteProductType_Handler,
		},
		{
			MethodName: "GetAllShopStaffList",
			Handler:    _Ams_GetAllShopStaffList_Handler,
		},
		{
			MethodName: "GetShopStaffList",
			Handler:    _Ams_GetShopStaffList_Handler,
		},
		{
			MethodName: "GetShopAllStaffSumList",
			Handler:    _Ams_GetShopAllStaffSumList_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _Ams_GetUserList_Handler,
		},
		{
			MethodName: "GetPositionList",
			Handler:    _Ams_GetPositionList_Handler,
		},
		{
			MethodName: "PostPosition",
			Handler:    _Ams_PostPosition_Handler,
		},
		{
			MethodName: "UpDatePosition",
			Handler:    _Ams_UpDatePosition_Handler,
		},
		{
			MethodName: "DeletePosition",
			Handler:    _Ams_DeletePosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Ams.proto",
}
