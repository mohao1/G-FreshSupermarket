// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	salesRecordsFieldNames          = builder.RawFieldNames(&SalesRecords{})
	salesRecordsRows                = strings.Join(salesRecordsFieldNames, ",")
	salesRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(salesRecordsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	salesRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(salesRecordsFieldNames, "`sales_records_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	salesRecordsModel interface {
		Insert(ctx context.Context, data *SalesRecords) (sql.Result, error)
		FindOne(ctx context.Context, salesRecordsId string) (*SalesRecords, error)
		Update(ctx context.Context, data *SalesRecords) error
		Delete(ctx context.Context, salesRecordsId string) error
	}

	defaultSalesRecordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SalesRecords struct {
		SalesRecordsId string    `db:"sales_records_id"` // 销售信息id
		ProductId      string    `db:"product_id"`       // 商品id
		SalesQuantity  int64     `db:"sales_quantity"`   // 出售数量
		TotalPrice     string    `db:"total_price"`      // 总的价格
		ShopId         string    `db:"shop_id"`          // 店铺id
		CreationTime   time.Time `db:"creation_time"`    // 创建时间
		UpdataTime     time.Time `db:"updata_time"`      // 更新时间
	}
)

func newSalesRecordsModel(conn sqlx.SqlConn) *defaultSalesRecordsModel {
	return &defaultSalesRecordsModel{
		conn:  conn,
		table: "`sales_records`",
	}
}

func (m *defaultSalesRecordsModel) Delete(ctx context.Context, salesRecordsId string) error {
	query := fmt.Sprintf("delete from %s where `sales_records_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, salesRecordsId)
	return err
}

func (m *defaultSalesRecordsModel) FindOne(ctx context.Context, salesRecordsId string) (*SalesRecords, error) {
	query := fmt.Sprintf("select %s from %s where `sales_records_id` = ? limit 1", salesRecordsRows, m.table)
	var resp SalesRecords
	err := m.conn.QueryRowCtx(ctx, &resp, query, salesRecordsId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSalesRecordsModel) Insert(ctx context.Context, data *SalesRecords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, salesRecordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SalesRecordsId, data.ProductId, data.SalesQuantity, data.TotalPrice, data.ShopId, data.CreationTime, data.UpdataTime)
	return ret, err
}

func (m *defaultSalesRecordsModel) Update(ctx context.Context, data *SalesRecords) error {
	query := fmt.Sprintf("update %s set %s where `sales_records_id` = ?", m.table, salesRecordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.SalesQuantity, data.TotalPrice, data.ShopId, data.CreationTime, data.UpdataTime, data.SalesRecordsId)
	return err
}

func (m *defaultSalesRecordsModel) tableName() string {
	return m.table
}
