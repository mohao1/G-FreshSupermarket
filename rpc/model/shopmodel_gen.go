// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shopFieldNames          = builder.RawFieldNames(&Shop{})
	shopRows                = strings.Join(shopFieldNames, ",")
	shopRowsExpectAutoSet   = strings.Join(stringx.Remove(shopFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	shopRowsWithPlaceHolder = strings.Join(stringx.Remove(shopFieldNames, "`shop_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	shopModel interface {
		Insert(ctx context.Context, data *Shop) (sql.Result, error)
		FindOne(ctx context.Context, shopId string) (*Shop, error)
		Update(ctx context.Context, data *Shop) error
		Delete(ctx context.Context, shopId string) error
	}

	defaultShopModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Shop struct {
		ShopId       string    `db:"shop_id"`       // 店铺id
		ShopName     string    `db:"shop_name"`     // 店铺名称
		ShopAddress  string    `db:"shop_address"`  // 店铺地址
		ShopCity     string    `db:"shop_city"`     // 所在城市
		ShopAdmin    string    `db:"shop_admin"`    // 商店经理id
		CreationTime time.Time `db:"creation_time"` // 创建时间
	}
)

func newShopModel(conn sqlx.SqlConn) *defaultShopModel {
	return &defaultShopModel{
		conn:  conn,
		table: "`shop`",
	}
}

func (m *defaultShopModel) Delete(ctx context.Context, shopId string) error {
	query := fmt.Sprintf("delete from %s where `shop_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, shopId)
	return err
}

func (m *defaultShopModel) FindOne(ctx context.Context, shopId string) (*Shop, error) {
	query := fmt.Sprintf("select %s from %s where `shop_id` = ? limit 1", shopRows, m.table)
	var resp Shop
	err := m.conn.QueryRowCtx(ctx, &resp, query, shopId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShopModel) Insert(ctx context.Context, data *Shop) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, shopRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ShopId, data.ShopName, data.ShopAddress, data.ShopCity, data.ShopAdmin, data.CreationTime)
	return ret, err
}

func (m *defaultShopModel) Update(ctx context.Context, data *Shop) error {
	query := fmt.Sprintf("update %s set %s where `shop_id` = ?", m.table, shopRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShopName, data.ShopAddress, data.ShopCity, data.ShopAdmin, data.CreationTime, data.ShopId)
	return err
}

func (m *defaultShopModel) tableName() string {
	return m.table
}
