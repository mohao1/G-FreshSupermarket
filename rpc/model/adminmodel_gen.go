// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminFieldNames          = builder.RawFieldNames(&Admin{})
	adminRows                = strings.Join(adminFieldNames, ",")
	adminRowsExpectAutoSet   = strings.Join(stringx.Remove(adminFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	adminRowsWithPlaceHolder = strings.Join(stringx.Remove(adminFieldNames, "`admin_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	adminModel interface {
		Insert(ctx context.Context, data *Admin) (sql.Result, error)
		FindOne(ctx context.Context, adminId string) (*Admin, error)
		Update(ctx context.Context, data *Admin) error
		Delete(ctx context.Context, adminId string) error
	}

	defaultAdminModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Admin struct {
		AdminId  string `db:"admin_id"` // 管理员id
		Password string `db:"password"` // 密码
	}
)

func newAdminModel(conn sqlx.SqlConn) *defaultAdminModel {
	return &defaultAdminModel{
		conn:  conn,
		table: "`admin`",
	}
}

func (m *defaultAdminModel) Delete(ctx context.Context, adminId string) error {
	query := fmt.Sprintf("delete from %s where `admin_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, adminId)
	return err
}

func (m *defaultAdminModel) FindOne(ctx context.Context, adminId string) (*Admin, error) {
	query := fmt.Sprintf("select %s from %s where `admin_id` = ? limit 1", adminRows, m.table)
	var resp Admin
	err := m.conn.QueryRowCtx(ctx, &resp, query, adminId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminModel) Insert(ctx context.Context, data *Admin) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, adminRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AdminId, data.Password)
	return ret, err
}

func (m *defaultAdminModel) Update(ctx context.Context, data *Admin) error {
	query := fmt.Sprintf("update %s set %s where `admin_id` = ?", m.table, adminRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Password, data.AdminId)
	return err
}

func (m *defaultAdminModel) tableName() string {
	return m.table
}
