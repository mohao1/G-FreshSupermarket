// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	staffFieldNames          = builder.RawFieldNames(&Staff{})
	staffRows                = strings.Join(staffFieldNames, ",")
	staffRowsExpectAutoSet   = strings.Join(stringx.Remove(staffFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	staffRowsWithPlaceHolder = strings.Join(stringx.Remove(staffFieldNames, "`staff_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	staffModel interface {
		Insert(ctx context.Context, data *Staff) (sql.Result, error)
		FindOne(ctx context.Context, staffId string) (*Staff, error)
		Update(ctx context.Context, data *Staff) error
		Delete(ctx context.Context, staffId string) error
	}

	defaultStaffModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Staff struct {
		StaffId      string    `db:"staff_id"`      // 员工id
		StaffName    string    `db:"staff_name"`    // 员工名称
		PositionId   string    `db:"position_id"`   // 权限id
		Password     string    `db:"password"`      // 密码
		ShopId       string    `db:"shop_id"`       // 店铺id
		CreationTime time.Time `db:"creation_time"` // 创建时间
	}
)

func newStaffModel(conn sqlx.SqlConn) *defaultStaffModel {
	return &defaultStaffModel{
		conn:  conn,
		table: "`staff`",
	}
}

func (m *defaultStaffModel) Delete(ctx context.Context, staffId string) error {
	query := fmt.Sprintf("delete from %s where `staff_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, staffId)
	return err
}

func (m *defaultStaffModel) FindOne(ctx context.Context, staffId string) (*Staff, error) {
	query := fmt.Sprintf("select %s from %s where `staff_id` = ? limit 1", staffRows, m.table)
	var resp Staff
	err := m.conn.QueryRowCtx(ctx, &resp, query, staffId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStaffModel) Insert(ctx context.Context, data *Staff) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, staffRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StaffId, data.StaffName, data.PositionId, data.Password, data.ShopId, data.CreationTime)
	return ret, err
}

func (m *defaultStaffModel) Update(ctx context.Context, data *Staff) error {
	query := fmt.Sprintf("update %s set %s where `staff_id` = ?", m.table, staffRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StaffName, data.PositionId, data.Password, data.ShopId, data.CreationTime, data.StaffId)
	return err
}

func (m *defaultStaffModel) tableName() string {
	return m.table
}
