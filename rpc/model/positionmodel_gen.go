// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	positionFieldNames          = builder.RawFieldNames(&Position{})
	positionRows                = strings.Join(positionFieldNames, ",")
	positionRowsExpectAutoSet   = strings.Join(stringx.Remove(positionFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	positionRowsWithPlaceHolder = strings.Join(stringx.Remove(positionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	positionModel interface {
		Insert(ctx context.Context, data *Position) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Position, error)
		Update(ctx context.Context, data *Position) error
		Delete(ctx context.Context, id string) error
	}

	defaultPositionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Position struct {
		Id           string `db:"id"`            // 权限id
		PositionName string `db:"position_name"` // 名称
		Grade        int64  `db:"grade"`         // 权限等级
	}
)

func newPositionModel(conn sqlx.SqlConn) *defaultPositionModel {
	return &defaultPositionModel{
		conn:  conn,
		table: "`position`",
	}
}

func (m *defaultPositionModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPositionModel) FindOne(ctx context.Context, id string) (*Position, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", positionRows, m.table)
	var resp Position
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPositionModel) Insert(ctx context.Context, data *Position) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, positionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.PositionName, data.Grade)
	return ret, err
}

func (m *defaultPositionModel) Update(ctx context.Context, data *Position) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, positionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PositionName, data.Grade, data.Id)
	return err
}

func (m *defaultPositionModel) tableName() string {
	return m.table
}
