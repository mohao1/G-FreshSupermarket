// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productTypeFieldNames          = builder.RawFieldNames(&ProductType{})
	productTypeRows                = strings.Join(productTypeFieldNames, ",")
	productTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(productTypeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(productTypeFieldNames, "`product_type_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	productTypeModel interface {
		Insert(ctx context.Context, data *ProductType) (sql.Result, error)
		FindOne(ctx context.Context, productTypeId string) (*ProductType, error)
		Update(ctx context.Context, data *ProductType) error
		Delete(ctx context.Context, productTypeId string) error
	}

	defaultProductTypeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductType struct {
		ProductTypeId   string `db:"product_type_id"`   // 产品类型id
		ProductTypeName string `db:"product_type_name"` // 产品类型名称
		ProductUnit     string `db:"product_unit"`      // 产品大小单位
	}
)

func newProductTypeModel(conn sqlx.SqlConn) *defaultProductTypeModel {
	return &defaultProductTypeModel{
		conn:  conn,
		table: "`product_type`",
	}
}

func (m *defaultProductTypeModel) Delete(ctx context.Context, productTypeId string) error {
	query := fmt.Sprintf("delete from %s where `product_type_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, productTypeId)
	return err
}

func (m *defaultProductTypeModel) FindOne(ctx context.Context, productTypeId string) (*ProductType, error) {
	query := fmt.Sprintf("select %s from %s where `product_type_id` = ? limit 1", productTypeRows, m.table)
	var resp ProductType
	err := m.conn.QueryRowCtx(ctx, &resp, query, productTypeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductTypeModel) Insert(ctx context.Context, data *ProductType) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, productTypeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductTypeId, data.ProductTypeName, data.ProductUnit)
	return ret, err
}

func (m *defaultProductTypeModel) Update(ctx context.Context, data *ProductType) error {
	query := fmt.Sprintf("update %s set %s where `product_type_id` = ?", m.table, productTypeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductTypeName, data.ProductUnit, data.ProductTypeId)
	return err
}

func (m *defaultProductTypeModel) tableName() string {
	return m.table
}
