// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productListFieldNames          = builder.RawFieldNames(&ProductList{})
	productListRows                = strings.Join(productListFieldNames, ",")
	productListRowsExpectAutoSet   = strings.Join(stringx.Remove(productListFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productListRowsWithPlaceHolder = strings.Join(stringx.Remove(productListFieldNames, "`product_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	productListModel interface {
		Insert(ctx context.Context, data *ProductList) (sql.Result, error)
		FindOne(ctx context.Context, productId string) (*ProductList, error)
		Update(ctx context.Context, data *ProductList) error
		Delete(ctx context.Context, productId string) error
	}

	defaultProductListModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductList struct {
		ProductId       string    `db:"product_id"`       // 商品id
		ProductName     string    `db:"product_name"`     // 商品名称
		ProductTitle    string    `db:"product_title"`    // 商品描述
		ProductTypeId   string    `db:"product_type_id"`  // 商品类型id
		ProductQuantity int64     `db:"product_quantity"` // 商品数量
		ProductPicture  string    `db:"product_picture"`  // 商品图片
		Price           string    `db:"price"`            // 商品价格
		ProductSize     int64     `db:"product_size"`     // 商品规格
		ShopId          string    `db:"shop_id"`          // 店铺id
		Producer        string    `db:"producer"`         // 产地
		DeleteKey       int64     `db:"delete_key"`       // 删除虚拟key
		CreationTime    time.Time `db:"creation_time"`    // 创建时间
		UpdataTime      time.Time `db:"updata_time"`      // 修改时间
	}
)

func newProductListModel(conn sqlx.SqlConn) *defaultProductListModel {
	return &defaultProductListModel{
		conn:  conn,
		table: "`product_list`",
	}
}

func (m *defaultProductListModel) Delete(ctx context.Context, productId string) error {
	query := fmt.Sprintf("delete from %s where `product_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, productId)
	return err
}

func (m *defaultProductListModel) FindOne(ctx context.Context, productId string) (*ProductList, error) {
	query := fmt.Sprintf("select %s from %s where `product_id` = ? limit 1", productListRows, m.table)
	var resp ProductList
	err := m.conn.QueryRowCtx(ctx, &resp, query, productId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductListModel) Insert(ctx context.Context, data *ProductList) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productListRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.ProductName, data.ProductTitle, data.ProductTypeId, data.ProductQuantity, data.ProductPicture, data.Price, data.ProductSize, data.ShopId, data.Producer, data.DeleteKey, data.CreationTime, data.UpdataTime)
	return ret, err
}

func (m *defaultProductListModel) Update(ctx context.Context, data *ProductList) error {
	query := fmt.Sprintf("update %s set %s where `product_id` = ?", m.table, productListRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductName, data.ProductTitle, data.ProductTypeId, data.ProductQuantity, data.ProductPicture, data.Price, data.ProductSize, data.ShopId, data.Producer, data.DeleteKey, data.CreationTime, data.UpdataTime, data.ProductId)
	return err
}

func (m *defaultProductListModel) tableName() string {
	return m.table
}
