// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`order_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, orderId string) (*Order, error)
		Update(ctx context.Context, data *Order) error
		Delete(ctx context.Context, orderId string) error
	}

	defaultOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Order struct {
		OrderId        string    `db:"order_id"`        // 订单id
		OrderName      string    `db:"order_name"`      // 订单名称
		OrderTitle     string    `db:"order_title"`     // 订单内容
		Price          string    `db:"price"`           // 价格
		ProductTypeId  string    `db:"product_type_id"` // 商品类型id
		OrderQuantity  int64     `db:"order_quantity"`  // 商品数量
		ProductSize    int64     `db:"product_size"`    // 商品规格
		ProductPicture string    `db:"product_picture"` // 商品图片
		OrderNumber    string    `db:"order_number"`    // 订单编号（同一个订单的编号相同）
		ShopId         string    `db:"shop_id"`         // 店铺id
		CreationTime   time.Time `db:"creation_time"`   // 创建时间
		UpdataTime     time.Time `db:"updata_time"`     // 修改时间
		DeleteKey      int64     `db:"delete_key"`      // 虚拟删除的Key
	}
)

func newOrderModel(conn sqlx.SqlConn) *defaultOrderModel {
	return &defaultOrderModel{
		conn:  conn,
		table: "`order`",
	}
}

func (m *defaultOrderModel) Delete(ctx context.Context, orderId string) error {
	query := fmt.Sprintf("delete from %s where `order_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, orderId)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, orderId string) (*Order, error) {
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", orderRows, m.table)
	var resp Order
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.OrderName, data.OrderTitle, data.Price, data.ProductTypeId, data.OrderQuantity, data.ProductSize, data.ProductPicture, data.OrderNumber, data.ShopId, data.CreationTime, data.UpdataTime, data.DeleteKey)
	return ret, err
}

func (m *defaultOrderModel) Update(ctx context.Context, data *Order) error {
	query := fmt.Sprintf("update %s set %s where `order_id` = ?", m.table, orderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderName, data.OrderTitle, data.Price, data.ProductTypeId, data.OrderQuantity, data.ProductSize, data.ProductPicture, data.OrderNumber, data.ShopId, data.CreationTime, data.UpdataTime, data.DeleteKey, data.OrderId)
	return err
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}
