// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	noticeFieldNames          = builder.RawFieldNames(&Notice{})
	noticeRows                = strings.Join(noticeFieldNames, ",")
	noticeRowsExpectAutoSet   = strings.Join(stringx.Remove(noticeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	noticeRowsWithPlaceHolder = strings.Join(stringx.Remove(noticeFieldNames, "`notice_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	noticeModel interface {
		Insert(ctx context.Context, data *Notice) (sql.Result, error)
		FindOne(ctx context.Context, noticeId string) (*Notice, error)
		Update(ctx context.Context, data *Notice) error
		Delete(ctx context.Context, noticeId string) error
	}

	defaultNoticeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Notice struct {
		NoticeId     string    `db:"notice_id"`     // 公告id
		NoticeTitle  string    `db:"notice_title"`  // 公告内容
		CreationTime time.Time `db:"creation_time"` // 创建时间
		UpdataTime   time.Time `db:"updata_time"`   // 修改时间
		ShopId       string    `db:"shop_id"`       // 店铺id
	}
)

func newNoticeModel(conn sqlx.SqlConn) *defaultNoticeModel {
	return &defaultNoticeModel{
		conn:  conn,
		table: "`notice`",
	}
}

func (m *defaultNoticeModel) Delete(ctx context.Context, noticeId string) error {
	query := fmt.Sprintf("delete from %s where `notice_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, noticeId)
	return err
}

func (m *defaultNoticeModel) FindOne(ctx context.Context, noticeId string) (*Notice, error) {
	query := fmt.Sprintf("select %s from %s where `notice_id` = ? limit 1", noticeRows, m.table)
	var resp Notice
	err := m.conn.QueryRowCtx(ctx, &resp, query, noticeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNoticeModel) Insert(ctx context.Context, data *Notice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, noticeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.NoticeId, data.NoticeTitle, data.CreationTime, data.UpdataTime, data.ShopId)
	return ret, err
}

func (m *defaultNoticeModel) Update(ctx context.Context, data *Notice) error {
	query := fmt.Sprintf("update %s set %s where `notice_id` = ?", m.table, noticeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.NoticeTitle, data.CreationTime, data.UpdataTime, data.ShopId, data.NoticeId)
	return err
}

func (m *defaultNoticeModel) tableName() string {
	return m.table
}
