// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	refundRecordFieldNames          = builder.RawFieldNames(&RefundRecord{})
	refundRecordRows                = strings.Join(refundRecordFieldNames, ",")
	refundRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(refundRecordFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	refundRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(refundRecordFieldNames, "`refund_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	refundRecordModel interface {
		Insert(ctx context.Context, data *RefundRecord) (sql.Result, error)
		FindOne(ctx context.Context, refundId string) (*RefundRecord, error)
		Update(ctx context.Context, data *RefundRecord) error
		Delete(ctx context.Context, refundId string) error
	}

	defaultRefundRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RefundRecord struct {
		RefundId   string `db:"refund_id"`   // 退款申请id
		ShopId     string `db:"shop_id"`     // 店铺id
		OrderId    string `db:"order_id"`    // 订单id
		UserId     string `db:"user_id"`     // 用户id
		RefundOver int64  `db:"refund_over"` // 是否取消申请
		Confirm    int64  `db:"confirm"`     // 是否同意
		DeleteKey  int64  `db:"delete_key"`  // 虚拟删除Key
	}
)

func newRefundRecordModel(conn sqlx.SqlConn) *defaultRefundRecordModel {
	return &defaultRefundRecordModel{
		conn:  conn,
		table: "`refund_record`",
	}
}

func (m *defaultRefundRecordModel) Delete(ctx context.Context, refundId string) error {
	query := fmt.Sprintf("delete from %s where `refund_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, refundId)
	return err
}

func (m *defaultRefundRecordModel) FindOne(ctx context.Context, refundId string) (*RefundRecord, error) {
	query := fmt.Sprintf("select %s from %s where `refund_id` = ? limit 1", refundRecordRows, m.table)
	var resp RefundRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, refundId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundRecordModel) Insert(ctx context.Context, data *RefundRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, refundRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RefundId, data.ShopId, data.OrderId, data.UserId, data.RefundOver, data.Confirm, data.DeleteKey)
	return ret, err
}

func (m *defaultRefundRecordModel) Update(ctx context.Context, data *RefundRecord) error {
	query := fmt.Sprintf("update %s set %s where `refund_id` = ?", m.table, refundRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShopId, data.OrderId, data.UserId, data.RefundOver, data.Confirm, data.DeleteKey, data.RefundId)
	return err
}

func (m *defaultRefundRecordModel) tableName() string {
	return m.table
}
