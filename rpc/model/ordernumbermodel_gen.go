// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderNumberFieldNames          = builder.RawFieldNames(&OrderNumber{})
	orderNumberRows                = strings.Join(orderNumberFieldNames, ",")
	orderNumberRowsExpectAutoSet   = strings.Join(stringx.Remove(orderNumberFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderNumberRowsWithPlaceHolder = strings.Join(stringx.Remove(orderNumberFieldNames, "`order_number`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderNumberModel interface {
		Insert(ctx context.Context, data *OrderNumber) (sql.Result, error)
		FindOne(ctx context.Context, orderNumber string) (*OrderNumber, error)
		Update(ctx context.Context, data *OrderNumber) error
		Delete(ctx context.Context, orderNumber string) error
	}

	defaultOrderNumberModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderNumber struct {
		OrderNumber       string       `db:"order_number"`       // 订单编号（同一个订单的编号相同）
		CustomerId        string       `db:"customer_id"`        // 客户id
		TotalPrice        string       `db:"total_price"`        // 总价
		Total             int64        `db:"total"`              // 总量
		Payment           int64        `db:"payment"`            // 是否付款
		ShopId            string       `db:"shop_id"`            // 店铺id
		OrderOver         int64        `db:"order_over"`         // 是否已经取消
		OrderReceive      int64        `db:"order_receive"`      // 确认接单
		ConfirmedDelivery int64        `db:"confirmed_delivery"` // 确认交付标记
		CreationTime      time.Time    `db:"creation_time"`      // 创建时间
		DeliveryTime      time.Time    `db:"delivery_time"`      // 交付时间
		ConfirmTime       sql.NullTime `db:"confirm_time"`       // 确认时间
		UpdataTime        time.Time    `db:"updata_time"`        // 修改时间
		EndTime           sql.NullTime `db:"end_time"`           // 结束时间
		DeleteKey         int64        `db:"delete_key"`         // 虚拟删除的Key
		Notes             string       `db:"notes"`              // 备注
	}
)

func newOrderNumberModel(conn sqlx.SqlConn) *defaultOrderNumberModel {
	return &defaultOrderNumberModel{
		conn:  conn,
		table: "`order_number`",
	}
}

func (m *defaultOrderNumberModel) Delete(ctx context.Context, orderNumber string) error {
	query := fmt.Sprintf("delete from %s where `order_number` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, orderNumber)
	return err
}

func (m *defaultOrderNumberModel) FindOne(ctx context.Context, orderNumber string) (*OrderNumber, error) {
	query := fmt.Sprintf("select %s from %s where `order_number` = ? limit 1", orderNumberRows, m.table)
	var resp OrderNumber
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderNumber)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderNumberModel) Insert(ctx context.Context, data *OrderNumber) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderNumberRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderNumber, data.CustomerId, data.TotalPrice, data.Total, data.Payment, data.ShopId, data.OrderOver, data.OrderReceive, data.ConfirmedDelivery, data.CreationTime, data.DeliveryTime, data.ConfirmTime, data.UpdataTime, data.EndTime, data.DeleteKey, data.Notes)
	return ret, err
}

func (m *defaultOrderNumberModel) Update(ctx context.Context, data *OrderNumber) error {
	query := fmt.Sprintf("update %s set %s where `order_number` = ?", m.table, orderNumberRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.TotalPrice, data.Total, data.Payment, data.ShopId, data.OrderOver, data.OrderReceive, data.ConfirmedDelivery, data.CreationTime, data.DeliveryTime, data.ConfirmTime, data.UpdataTime, data.EndTime, data.DeleteKey, data.Notes, data.OrderNumber)
	return err
}

func (m *defaultOrderNumberModel) tableName() string {
	return m.table
}
